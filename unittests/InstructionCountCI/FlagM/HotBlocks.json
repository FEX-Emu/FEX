{
  "Features": {
    "Bitness": 64,
    "EnabledHostFeatures": [
      "FLAGM",
      "FLAGM2"
    ],
    "DisabledHostFeatures": [
      "SVE128",
      "SVE256",
      "AFP"
    ]
  },
  "Instructions": {
    "The Witcher 3": {
      "x86InstructionCount": 7,
      "ExpectedInstructionCount": 9,
      "x86Insts": [
        "mov eax, 0x1",
        "lock xadd qword [rcx], rax",
        "mov rdx, rax",
        "and edx, 0x1f",
        "inc rdx",
        "shl rdx, 0x6",
        "add rdx, rcx"
      ],
      "ExpectedArm64ASM": [
        "mov w4, #0x1",
        "ldaddal x4, x4, [x7]",
        "and w5, w4, #0x1f",
        "add x5, x5, #0x1 (1)",
        "lsl x5, x5, #6",
        "eor x27, x5, x7",
        "adds x26, x5, x7",
        "cfinv",
        "mov x5, x26"
      ]
    },
    "FMOD scalar loop": {
      "x86InstructionCount": 38,
      "ExpectedInstructionCount": 46,
      "x86Insts": [
        "mov     esi, ecx",
        "mov     rdx, rbp",
        "mov     rax, rbx",
        "movss   xmm2, dword [rdx]",
        "add     rax, 0x20",
        "mulss   xmm2, xmm0",
        "add     rdx, 0x20",
        "addss   xmm2, dword [rax-0x20]",
        "movss   dword [rax-0x20], xmm2",
        "movss   xmm2, dword [rdx-0x1c]",
        "mulss   xmm2, xmm1",
        "addss   xmm2, dword [rax-0x1c]",
        "movss   dword [rax-0x1c], xmm2",
        "movss   xmm2, dword [rdx-0x18]",
        "mulss   xmm2, xmm0",
        "addss   xmm2, dword [rax-0x18]",
        "movss   dword [rax-0x18], xmm2",
        "movss   xmm2, dword [rdx-0x14]",
        "mulss   xmm2, xmm1",
        "addss   xmm2, dword [rax-0x14]",
        "movss   dword [rax-0x14], xmm2",
        "movss   xmm2, dword [rdx-0x10]",
        "mulss   xmm2, xmm0",
        "addss   xmm2, dword [rax-0x10]",
        "movss   dword [rax-0x10], xmm2",
        "movss   xmm2, dword [rdx-0xc]",
        "mulss   xmm2, xmm1",
        "addss   xmm2, dword [rax-0xc]",
        "movss   dword [rax-0xc], xmm2",
        "movss   xmm2, dword [rdx-0x8]",
        "mulss   xmm2, xmm0",
        "addss   xmm2, dword [rax-0x8]",
        "movss   dword [rax-0x8], xmm2",
        "movss   xmm2, dword [rdx-0x4]",
        "mulss   xmm2, xmm1",
        "addss   xmm2, dword [rax-0x4]",
        "movss   dword [rax-0x4], xmm2",
        "sub     esi, 0x1"
      ],
      "ExpectedArm64ASM": [
        "ldr s18, [x9]",
        "add x4, x6, #0x20 (32)",
        "fmul v18.4s, v18.4s, v16.4s",
        "add x5, x9, #0x20 (32)",
        "ldur s2, [x4, #-32]",
        "fadd v18.4s, v18.4s, v2.4s",
        "stur s18, [x4, #-32]",
        "ldur s18, [x5, #-28]",
        "fmul v18.4s, v18.4s, v17.4s",
        "ldur s3, [x4, #-28]",
        "fadd v18.4s, v18.4s, v3.4s",
        "stur s18, [x4, #-28]",
        "ldur s18, [x5, #-24]",
        "fmul v18.4s, v18.4s, v16.4s",
        "ldur s4, [x4, #-24]",
        "fadd v18.4s, v18.4s, v4.4s",
        "stur s18, [x4, #-24]",
        "ldur s18, [x5, #-20]",
        "fmul v18.4s, v18.4s, v17.4s",
        "ldur s5, [x4, #-20]",
        "fadd v18.4s, v18.4s, v5.4s",
        "stur s18, [x4, #-20]",
        "ldur s18, [x5, #-16]",
        "fmul v18.4s, v18.4s, v16.4s",
        "ldur s6, [x4, #-16]",
        "fadd v18.4s, v18.4s, v6.4s",
        "stur s18, [x4, #-16]",
        "ldur s18, [x5, #-12]",
        "fmul v18.4s, v18.4s, v17.4s",
        "ldur s7, [x4, #-12]",
        "fadd v18.4s, v18.4s, v7.4s",
        "stur s18, [x4, #-12]",
        "ldur s18, [x5, #-8]",
        "fmul v18.4s, v18.4s, v16.4s",
        "ldur s8, [x4, #-8]",
        "fadd v18.4s, v18.4s, v8.4s",
        "stur s18, [x4, #-8]",
        "ldur s18, [x5, #-4]",
        "fmul v18.4s, v18.4s, v17.4s",
        "ldur s9, [x4, #-4]",
        "fadd s0, s18, s9",
        "mov v18.s[0], v0.s[0]",
        "stur s18, [x4, #-4]",
        "subs w26, w7, #0x1 (1)",
        "mov x27, x7",
        "mov x10, x26"
      ]
    },
    "Scalar vector add loop": {
      "x86InstructionCount": 5,
      "ExpectedInstructionCount": 6,
      "Comment": [
        "Saw this in bytemark"
      ],
      "x86Insts": [
        "movdqu  xmm0, [r12+rax]",
        "paddq   xmm0, xmm1",
        "movups  [r12+rax], xmm0",
        "add     rax, 0x10",
        "cmp     rsi, rax"
      ],
      "ExpectedArm64ASM": [
        "ldr q16, [x16, x4, sxtx]",
        "add v16.2d, v16.2d, v17.2d",
        "str q16, [x16, x4, sxtx]",
        "add x4, x4, #0x10 (16)",
        "eor x27, x10, x4",
        "subs x26, x10, x4"
      ]
    },
    "bytemark data xor loop": {
      "x86InstructionCount": 9,
      "ExpectedInstructionCount": 11,
      "Comment": [
        "Saw this in bytemark"
      ],
      "x86Insts": [
        "mov     rdx, rax",
        "mov     rcx, rax",
        "mov     r14, rsi",
        "add     rax, 0x1",
        "shr     rdx, 0x6",
        "and     ecx, 0x3f",
        "shl     r14, cl",
        "xor     qword [rbx+rdx*8], r14",
        "cmp     rdi, rax"
      ],
      "ExpectedArm64ASM": [
        "mov x5, x4",
        "mov x7, x4",
        "add x4, x4, #0x1 (1)",
        "lsr x5, x5, #6",
        "and w7, w7, #0x3f",
        "lsl x19, x10, x7",
        "ldr x20, [x6, x5, sxtx #3]",
        "eor x21, x20, x19",
        "str x21, [x6, x5, sxtx #3]",
        "eor x27, x11, x4",
        "subs x26, x11, x4"
      ]
    },
    "bytemark num sort": {
      "x86InstructionCount": 4,
      "ExpectedInstructionCount": 5,
      "Comment": [
        "Saw this in bytemark"
      ],
      "x86Insts": [
        "mov    r13, qword [rsi+r9*8]",
        "mov    r11, r9",
        "or     r11, 0x1",
        "cmp    r13, qword [rsi+r11*8]"
      ],
      "ExpectedArm64ASM": [
        "ldr x17, [x10, x13, sxtx #3]",
        "orr x15, x13, #0x1",
        "ldr x20, [x10, x15, sxtx #3]",
        "eor x27, x17, x20",
        "subs x26, x17, x20"
      ]
    },
    "bytemark fpemu": {
      "x86InstructionCount": 8,
      "ExpectedInstructionCount": 10,
      "Comment": [
        "Saw this in bytemark"
      ],
      "x86Insts": [
        "movzx  r10d,word [rdx+0x4]",
        "movzx  edi,word [rdx+0x6]",
        "mov    dword [rsp+0xc],edi",
        "movzx  ebx,word [rdx+0x8]",
        "movzx  edi,word [rdx+0xa]",
        "mov    dword [rsp+0x10],edi",
        "lea    r8,[r11+r11*2]",
        "cmp    qword [r13+r8*4+0x4],0x0"
      ],
      "ExpectedArm64ASM": [
        "ldrh w14, [x5, #4]",
        "ldrh w11, [x5, #6]",
        "str w11, [x8, #12]",
        "ldrh w6, [x5, #8]",
        "ldrh w11, [x5, #10]",
        "str w11, [x8, #16]",
        "add x12, x15, x15, lsl #1",
        "add x20, x17, x12, lsl #2",
        "ldur x27, [x20, #4]",
        "subs x26, x27, #0x0 (0)"
      ]
    },
    "bytemark DivideInternalFPF": {
      "x86InstructionCount": 13,
      "ExpectedInstructionCount": 15,
      "Comment": [
        "Saw this in bytemark"
      ],
      "x86Insts": [
        "push   rbp",
        "push   r15",
        "push   r14",
        "push   r13",
        "push   r12",
        "push   rbx",
        "sub    rsp,0x18",
        "mov    qword [rsp],rdx",
        "movzx  r10d,byte [rdi]",
        "lea    ecx,[r10+r10*4]",
        "movzx  eax,byte [rsi]",
        "add    eax,ecx",
        "cmp    eax,0x18"
      ],
      "ExpectedArm64ASM": [
        "str x9, [x8, #-8]!",
        "str x29, [x8, #-8]!",
        "str x19, [x8, #-8]!",
        "str x17, [x8, #-8]!",
        "str x16, [x8, #-8]!",
        "str x6, [x8, #-8]!",
        "sub x8, x8, #0x18 (24)",
        "str x5, [x8]",
        "ldrb w14, [x11]",
        "add x20, x14, x14, lsl #2",
        "mov w7, w20",
        "ldrb w4, [x10]",
        "add w4, w4, w20",
        "mvn w27, w4",
        "subs w26, w4, #0x18 (24)"
      ]
    },
    "bytemark huffman 1": {
      "x86InstructionCount": 18,
      "ExpectedInstructionCount": 19,
      "x86Insts": [
        "mov    r9,rdx",
        "mov    r8,rcx",
        "nop    dword [rax+0x0]",
        "mov    r10d,esi",
        "shr    r10d,0x3",
        "movzx  r10d,byte [rbp+r10*1+0x0]",
        "mov    r11d,esi",
        "and    r11d,0x7",
        "bt     r10d,r11d",
        "lea    r8,[r8+r8*4]",
        "lea    r8,[rbx+r8*4+0x10]",
        "cmovae r8,r9",
        "movsxd r8,dword [r8]",
        "add    rsi,0x1",
        "lea    r10,[r8+r8*4]",
        "lea    r9,[rbx+r10*4]",
        "add    r9,0xc",
        "cmp    dword [rbx+r10*4+0xc],0xffffffff"
      ],
      "ExpectedArm64ASM": [
        "lsr w14, w10, #3",
        "ldrb w14, [x9, x14, sxtx]",
        "and w15, w10, #0x7",
        "lsr w20, w14, w15",
        "rmif x20, #63, #nzCv",
        "add x12, x7, x7, lsl #2",
        "add x21, x6, #0x10 (16)",
        "add x12, x21, x12, lsl #2",
        "csel x12, x5, x12, lo",
        "ldr w22, [x12]",
        "sxtw x12, w22",
        "add x10, x10, #0x1 (1)",
        "add x14, x12, x12, lsl #2",
        "add x13, x6, x14, lsl #2",
        "add x13, x13, #0xc (12)",
        "add x23, x6, x14, lsl #2",
        "ldr w24, [x23, #12]",
        "mvn w27, w24",
        "adds w26, w24, #0x1 (1)"
      ]
    },
    "bytemark huffman 2": {
      "x86InstructionCount": 10,
      "ExpectedInstructionCount": 17,
      "x86Insts": [
        "movsxd r9,r8d",
        "lea    r9,[r9+r9*4]",
        "cmp    dword [rbx+r9*4+0xc],ecx",
        "sete   cl",
        "xor    cl,0x31",
        "mov    byte [rsp+rdi*1+0x50],cl",
        "add    rdi,0x1",
        "mov    ecx,r8d",
        "mov    r8d,dword [rbx+r9*4+0x8]",
        "cmp    r8d,0xfffffffe"
      ],
      "ExpectedArm64ASM": [
        "sxtw x13, w12",
        "add x13, x13, x13, lsl #2",
        "add x20, x6, x13, lsl #2",
        "ldr w21, [x20, #12]",
        "cmp w21, w7",
        "cset x22, eq",
        "bfxil x7, x22, #0, #8",
        "mov w23, #0x31",
        "eor x7, x7, x23",
        "add x24, x8, x11",
        "strb w7, [x24, #80]",
        "add x11, x11, #0x1 (1)",
        "mov w7, w12",
        "add x25, x6, x13, lsl #2",
        "ldr w12, [x25, #8]",
        "mvn w27, w12",
        "adds w26, w12, #0x2 (2)"
      ]
    },
    "bytemark huffman 3": {
      "x86InstructionCount": 19,
      "ExpectedInstructionCount": 29,
      "x86Insts": [
        "mov    ecx,eax",
        "and    cl,0x7",
        "mov    r8b,0x1",
        "shl    r8b,cl",
        "mov    r9d,eax",
        "shr    r9d,0x3",
        "movzx  r10d,byte [rbp+r9*1+0x0]",
        "mov    r11b,0xfe",
        "mov    ecx,eax",
        "rol    r11b,cl",
        "and    r11b,r10b",
        "or     r8b,r10b",
        "cmp    byte [rsp+rdi*1+0x4f],0x31",
        "movzx  ecx,r8b",
        "movzx  r8d,r11b",
        "cmove  r8d,ecx",
        "add    rax,0x1",
        "mov    byte [rbp+r9*1+0x0],r8b",
        "add    rdi,0xffffffffffffffff"
      ],
      "ExpectedArm64ASM": [
        "and w7, w4, #0xffffff07",
        "mov w20, #0x1",
        "lsl w21, w20, w7",
        "lsr w13, w4, #3",
        "ldrb w14, [x9, x13, sxtx]",
        "mov w22, #0xfe",
        "bfxil x15, x22, #0, #8",
        "and w23, w4, #0x7",
        "mov x24, x15",
        "bfi w24, w15, #24, #8",
        "neg w25, w23",
        "ror w30, w24, w25",
        "and w18, w30, w14",
        "bfxil x15, x18, #0, #8",
        "orr w20, w21, w14",
        "mov w21, #0x31",
        "add x22, x8, x11",
        "ldrb w23, [x22, #79]",
        "lsl w0, w23, #24",
        "cmp w0, w21, lsl #24",
        "uxtb w7, w20",
        "uxtb w12, w18",
        "csel w12, w7, w12, eq",
        "add x4, x4, #0x1 (1)",
        "strb w12, [x9, x13, sxtx]",
        "mvn w27, w11",
        "subs x26, x11, #0x1 (1)",
        "cfinv",
        "mov x11, x26"
      ]
    },
    "glibc AVX memcpy block 1": {
      "x86InstructionCount": 20,
      "ExpectedInstructionCount": 26,
      "x86Insts": [
        "vmovdqu ymm5,yword [rsi+0x20]",
        "vmovdqu ymm6,yword [rsi+0x40]",
        "lea    rcx,[rdi+rdx*1-0x81]",
        "vmovdqu ymm7,yword [rsi+0x60]",
        "vmovdqu ymm8,yword [rsi+rdx*1-0x20]",
        "sub    rsi,rdi",
        "and    rcx,0xffffffffffffffe0",
        "add    rsi,rcx",
        "nop    dword [rax+0x0]",
        "vmovdqu ymm1,yword [rsi+0x60]",
        "vmovdqu ymm2,yword [rsi+0x40]",
        "vmovdqu ymm3,yword [rsi+0x20]",
        "vmovdqu ymm4,yword [rsi]",
        "add    rsi,0xffffffffffffff80",
        "vmovdqa yword [rcx+0x60],ymm1",
        "vmovdqa yword [rcx+0x40],ymm2",
        "vmovdqa yword [rcx+0x20],ymm3",
        "vmovdqa yword [rcx],ymm4",
        "add    rcx,0xffffffffffffff80",
        "cmp    rdi,rcx"
      ],
      "ExpectedArm64ASM": [
        "ldp q21, q2, [x10, #32]",
        "ldp q22, q3, [x10, #64]",
        "sub x20, x11, #0x81 (129)",
        "add x7, x20, x5",
        "ldp q23, q4, [x10, #96]",
        "add x21, x10, x5",
        "ldp q24, q5, [x21, #-32]",
        "sub x10, x10, x11",
        "and x7, x7, #0xffffffffffffffe0",
        "add x10, x10, x7",
        "ldp q17, q6, [x10, #96]",
        "ldp q18, q7, [x10, #64]",
        "ldp q19, q8, [x10, #32]",
        "ldp q20, q9, [x10]",
        "sub x10, x10, #0x80 (128)",
        "stp q17, q6, [x7, #96]",
        "stp q18, q7, [x7, #64]",
        "stp q19, q8, [x7, #32]",
        "stp q20, q9, [x7]",
        "sub x7, x7, #0x80 (128)",
        "eor x27, x11, x7",
        "subs x26, x11, x7",
        "stp q4, q5, [x28, #128]",
        "stp q2, q3, [x28, #96]",
        "stp q8, q9, [x28, #64]",
        "stp q6, q7, [x28, #32]"
      ]
    },
    "glibc AVX memcpy block 2": {
      "x86InstructionCount": 22,
      "ExpectedInstructionCount": 31,
      "x86Insts": [
        "vmovdqu ymm5,yword [rsi+rdx*1-0x20]",
        "vmovdqu ymm6,yword [rsi+rdx*1-0x40]",
        "mov    rcx,rdi",
        "or     rdi,0x1f",
        "vmovdqu ymm7,yword [rsi+rdx*1-0x60]",
        "vmovdqu ymm8,yword [rsi+rdx*1-0x80]",
        "sub    rsi,rcx",
        "inc    rdi",
        "add    rsi,rdi",
        "lea    rdx,[rcx+rdx*1-0x80]",
        "nop    dword [rax+rax*1+0x0]",
        "vmovdqu ymm1,yword [rsi]",
        "vmovdqu ymm2,yword [rsi+0x20]",
        "vmovdqu ymm3,yword [rsi+0x40]",
        "vmovdqu ymm4,yword [rsi+0x60]",
        "sub    rsi,0xffffffffffffff80",
        "vmovdqa yword [rdi],ymm1",
        "vmovdqa yword [rdi+0x20],ymm2",
        "vmovdqa yword [rdi+0x40],ymm3",
        "vmovdqa yword [rdi+0x60],ymm4",
        "sub    rdi,0xffffffffffffff80",
        "cmp    rdx,rdi"
      ],
      "ExpectedArm64ASM": [
        "add x20, x10, x5",
        "ldp q21, q2, [x20, #-32]",
        "add x21, x10, x5",
        "ldp q22, q3, [x21, #-64]",
        "mov x7, x11",
        "orr x11, x11, #0x1f",
        "add x22, x10, x5",
        "ldp q23, q4, [x22, #-96]",
        "add x23, x10, x5",
        "ldp q24, q5, [x23, #-128]",
        "sub x10, x10, x7",
        "add x11, x11, #0x1 (1)",
        "add x10, x10, x11",
        "sub x24, x7, #0x80 (128)",
        "add x5, x24, x5",
        "ldp q17, q6, [x10]",
        "ldp q18, q7, [x10, #32]",
        "ldp q19, q8, [x10, #64]",
        "ldp q20, q9, [x10, #96]",
        "add x10, x10, #0x80 (128)",
        "stp q17, q6, [x11]",
        "stp q18, q7, [x11, #32]",
        "stp q19, q8, [x11, #64]",
        "stp q20, q9, [x11, #96]",
        "add x11, x11, #0x80 (128)",
        "eor x27, x5, x11",
        "subs x26, x5, x11",
        "stp q4, q5, [x28, #128]",
        "stp q2, q3, [x28, #96]",
        "stp q8, q9, [x28, #64]",
        "stp q6, q7, [x28, #32]"
      ]
    },
    "bytemark strsift": {
      "x86InstructionCount": 15,
      "ExpectedInstructionCount": 19,
      "x86Insts": [
        "mov    rsi,rdx",
        "and    rsi,0xfffffffffffffffc",
        "movq   xmm0,rcx",
        "pshufd xmm0,xmm0,0x44",
        "mov    rdi,qword [rsp+0x20]",
        "lea    rdi,[rdi+r13*8]",
        "xor    r8d,r8d",
        "movdqu xmm1,oword [rdi+r8*8-0x10]",
        "movdqu xmm2,oword [rdi+r8*8]",
        "paddq  xmm1,xmm0",
        "paddq  xmm2,xmm0",
        "movdqu oword [rdi+r8*8-0x10],xmm1",
        "movdqu oword [rdi+r8*8],xmm2",
        "add    r8,0x4",
        "cmp    rsi,r8"
      ],
      "ExpectedArm64ASM": [
        "and x10, x5, #0xfffffffffffffffc",
        "fmov d16, x7",
        "dup v16.2d, v16.d[0]",
        "ldr x11, [x8, #32]",
        "add x11, x11, x17, lsl #3",
        "mov w12, #0x0",
        "add x20, x11, x12, lsl #3",
        "ldur q17, [x20, #-16]",
        "add x21, x11, x12, lsl #3",
        "ldr q18, [x21]",
        "add v17.2d, v17.2d, v16.2d",
        "add v18.2d, v18.2d, v16.2d",
        "add x22, x11, x12, lsl #3",
        "stur q17, [x22, #-16]",
        "add x23, x11, x12, lsl #3",
        "str q18, [x23]",
        "add x12, x12, #0x4 (4)",
        "eor x27, x10, x12",
        "subs x26, x10, x12"
      ]
    },
    "bytemark idea 1": {
      "x86InstructionCount": 8,
      "ExpectedInstructionCount": 11,
      "x86Insts": [
        "movzx  eax,ax",
        "imul   r8d,eax",
        "mov    eax,r8d",
        "shr    eax,0x10",
        "movzx  r9d,r8w",
        "sub    r8d,eax",
        "cmp    r9d,eax",
        "adc    r8d,0x0"
      ],
      "ExpectedArm64ASM": [
        "uxth w4, w4",
        "mul w12, w12, w4",
        "lsr w4, w12, #16",
        "uxth w13, w12",
        "sub w12, w12, w4",
        "cmp w13, w4",
        "cset w0, lo",
        "adds w26, w12, w0",
        "cfinv",
        "mov x27, x12",
        "mov x12, x26"
      ]
    },
    "bytemark idea 2": {
      "x86InstructionCount": 12,
      "ExpectedInstructionCount": 15,
      "x86Insts": [
        "movzx  eax,ax",
        "imul   r10d,eax",
        "mov    eax,r10d",
        "shr    eax,0x10",
        "movzx  esi,r10w",
        "sub    r10d,eax",
        "cmp    esi,eax",
        "adc    r10d,0x0",
        "mov    eax,r10d",
        "mov    esi,r9d",
        "xor    si,di",
        "movzx  r10d,word [rsp+r8*1+0x158]"
      ],
      "ExpectedArm64ASM": [
        "uxth w4, w4",
        "mul w14, w14, w4",
        "lsr w4, w14, #16",
        "uxth w10, w14",
        "sub w14, w14, w4",
        "cmp w10, w4",
        "cinc w14, w14, lo",
        "mov w4, w14",
        "mov w10, w13",
        "eor w26, w10, w11",
        "cmn wzr, w26, lsl #16",
        "bfxil x10, x26, #0, #16",
        "add x20, x8, x12",
        "ldrh w14, [x20, #344]",
        "cfinv"
      ]
    },
    "bytemark idea 3": {
      "x86InstructionCount": 11,
      "ExpectedInstructionCount": 13,
      "x86Insts": [
        "movzx  eax,si",
        "imul   r8d,eax",
        "mov    eax,r8d",
        "shr    eax,0x10",
        "movzx  esi,r8w",
        "sub    r8d,eax",
        "cmp    esi,eax",
        "adc    r8d,0x0",
        "mov    esi,r8d",
        "movzx  r8d,word [rsp+rdi*1+0x66]",
        "test   dx,dx"
      ],
      "ExpectedArm64ASM": [
        "uxth w4, w10",
        "mul w12, w12, w4",
        "lsr w4, w12, #16",
        "uxth w10, w12",
        "sub w12, w12, w4",
        "cmp w10, w4",
        "cinc w12, w12, lo",
        "mov w10, w12",
        "add x20, x8, x11",
        "ldrh w12, [x20, #102]",
        "cmn wzr, w5, lsl #16",
        "cfinv",
        "mov x26, x5"
      ]
    },
    "Factorio drawSprite+0x890": {
      "x86InstructionCount": 3,
      "ExpectedInstructionCount": 5,
      "Comment": "first load should be rip relative",
      "x86Insts": [
        "movss  xmm9,dword [rbp]",
        "and    r9d,0x800000",
        "movss  dword [rbp-0x58],xmm9"
      ],
      "ExpectedArm64ASM": [
        "ldr s25, [x9]",
        "ands w26, w13, #0x800000",
        "mov x13, x26",
        "stur s25, [x9, #-88]",
        "cfinv"
      ]
    },
    "Factorio drawSprite+0xf2": {
      "x86InstructionCount": 9,
      "ExpectedInstructionCount": 11,
      "x86Insts": [
        "movss  xmm8,dword [rbp-0x58]",
        "mov    byte [rbp-0x49],r13b",
        "mov    byte [rbp-0x4a],r14b",
        "mov    rdx,qword [rdi+0x8]",
        "mov    qword [rbp-0x38],rbx",
        "mov    byte [rbp-0x4b],al",
        "mov    qword [rbp-0x40],r11",
        "movss  dword [rbp-0x48],xmm8",
        "cmp    rdx,qword [rdi]"
      ],
      "ExpectedArm64ASM": [
        "ldur s24, [x9, #-88]",
        "sturb w17, [x9, #-73]",
        "sturb w19, [x9, #-74]",
        "ldr x5, [x11, #8]",
        "stur x6, [x9, #-56]",
        "sturb w4, [x9, #-75]",
        "stur x15, [x9, #-64]",
        "stur s24, [x9, #-72]",
        "ldr x20, [x11]",
        "eor x27, x5, x20",
        "subs x26, x5, x20"
      ]
    },
    "Factorio drawSprite+0x520": {
      "x86InstructionCount": 4,
      "ExpectedInstructionCount": 7,
      "x86Insts": [
        "sub    ecx,0x9",
        "xor    r11d,r11d",
        "cmp    cl,0x1",
        "cmovbe r11,rsi"
      ],
      "ExpectedArm64ASM": [
        "sub w7, w7, #0x9 (9)",
        "mov w20, #0x1",
        "lsl w0, w7, #24",
        "cmp w0, w20, lsl #24",
        "sub w26, w7, #0x1 (1)",
        "mov x27, x7",
        "csel x15, x10, xzr, ls"
      ]
    },
    "pcmpistri xmm0, xmm1, 0_0_00_11_01b": {
      "ExpectedInstructionCount": 36,
      "Comment": [
        "A Hat In Time spends at least 5% CPU time in this instruction",
        "Comes from vcruntime140.dll wcsstr"
      ],
      "ExpectedArm64ASM": [
        "mrs x0, nzcv",
        "str w0, [x28, #1000]",
        "stp x4, x7, [x28, #280]",
        "stp x5, x6, [x28, #296]",
        "str x8, [x28, #312]",
        "stp x16, x17, [x28, #376]",
        "sub sp, sp, #0x70 (112)",
        "mov x0, sp",
        "st1 {v2.2d, v3.2d}, [x0], #32",
        "st1 {v4.2d, v5.2d, v6.2d, v7.2d}, [x0], #64",
        "stp x18, x30, [x0], #16",
        "mov v0.16b, v16.16b",
        "mov v1.16b, v17.16b",
        "mov w0, #0xd",
        "ldr x1, [x28, #1760]",
        "blr x1",
        "ldr w4, [x28, #1000]",
        "msr nzcv, x4",
        "ldp x4, x7, [x28, #280]",
        "ldp x5, x6, [x28, #296]",
        "ldr x8, [x28, #312]",
        "ldp x16, x17, [x28, #376]",
        "ld1 {v2.2d, v3.2d}, [sp], #32",
        "ld1 {v4.2d, v5.2d, v6.2d, v7.2d}, [sp], #64",
        "ldp x18, x30, [sp], #16",
        "mov w20, w0",
        "mov w27, #0x0",
        "uxth w21, w20",
        "mov w22, #0x8",
        "rbit w0, w21",
        "clz w23, w0",
        "cmp x21, #0x0 (0)",
        "csel x7, x22, x23, eq",
        "mov w26, #0x1",
        "eor w24, w20, #0x20000000",
        "msr nzcv, x24"
      ]
    }
  }
}
