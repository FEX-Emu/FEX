{
  "Features": {
    "Bitness": 64,
    "EnabledHostFeatures": [
      "FLAGM",
      "FLAGM2"
    ],
    "DisabledHostFeatures": [
      "SVE128",
      "SVE256",
      "AFP"
    ]
  },
  "Instructions": {
    "The Witcher 3": {
      "ExpectedInstructionCount": 10,
      "x86Insts": [
        "mov eax, 0x1",
        "lock xadd qword [rcx], rax",
        "mov rdx, rax",
        "and edx, 0x1f",
        "inc rdx",
        "shl rdx, 0x6",
        "add rdx, rcx"
      ],
      "ExpectedArm64ASM": [
        "mov w4, #0x1",
        "ldaddal x4, x4, [x5]",
        "mov x6, x4",
        "and w6, w6, #0x1f",
        "add x6, x6, #0x1 (1)",
        "lsl x6, x6, #6",
        "eor w27, w6, w5",
        "adds x26, x6, x5",
        "cfinv",
        "mov x6, x26"
      ]
    },
    "FMOD scalar loop": {
      "ExpectedInstructionCount": 64,
      "x86Insts": [
        "mov     esi, ecx",
        "mov     rdx, rbp",
        "mov     rax, rbx",
        "movss   xmm2, dword [rdx]",
        "add     rax, 0x20",
        "mulss   xmm2, xmm0",
        "add     rdx, 0x20",
        "addss   xmm2, dword [rax-0x20]",
        "movss   dword [rax-0x20], xmm2",
        "movss   xmm2, dword [rdx-0x1c]",
        "mulss   xmm2, xmm1",
        "addss   xmm2, dword [rax-0x1c]",
        "movss   dword [rax-0x1c], xmm2",
        "movss   xmm2, dword [rdx-0x18]",
        "mulss   xmm2, xmm0",
        "addss   xmm2, dword [rax-0x18]",
        "movss   dword [rax-0x18], xmm2",
        "movss   xmm2, dword [rdx-0x14]",
        "mulss   xmm2, xmm1",
        "addss   xmm2, dword [rax-0x14]",
        "movss   dword [rax-0x14], xmm2",
        "movss   xmm2, dword [rdx-0x10]",
        "mulss   xmm2, xmm0",
        "addss   xmm2, dword [rax-0x10]",
        "movss   dword [rax-0x10], xmm2",
        "movss   xmm2, dword [rdx-0xc]",
        "mulss   xmm2, xmm1",
        "addss   xmm2, dword [rax-0xc]",
        "movss   dword [rax-0xc], xmm2",
        "movss   xmm2, dword [rdx-0x8]",
        "mulss   xmm2, xmm0",
        "addss   xmm2, dword [rax-0x8]",
        "movss   dword [rax-0x8], xmm2",
        "movss   xmm2, dword [rdx-0x4]",
        "mulss   xmm2, xmm1",
        "addss   xmm2, dword [rax-0x4]",
        "movss   dword [rax-0x4], xmm2",
        "sub     esi, 0x1"
      ],
      "ExpectedArm64ASM": [
        "mov w10, w5",
        "mov x6, x9",
        "mov x4, x7",
        "ldr s18, [x6]",
        "add x4, x4, #0x20 (32)",
        "fmul s0, s18, s16",
        "mov v18.s[0], v0.s[0]",
        "add x6, x6, #0x20 (32)",
        "ldur s2, [x4, #-32]",
        "fadd s0, s18, s2",
        "mov v18.s[0], v0.s[0]",
        "stur s18, [x4, #-32]",
        "ldur s18, [x6, #-28]",
        "fmul s0, s18, s17",
        "mov v18.s[0], v0.s[0]",
        "ldur s2, [x4, #-28]",
        "fadd s0, s18, s2",
        "mov v18.s[0], v0.s[0]",
        "stur s18, [x4, #-28]",
        "ldur s18, [x6, #-24]",
        "fmul s0, s18, s16",
        "mov v18.s[0], v0.s[0]",
        "ldur s2, [x4, #-24]",
        "fadd s0, s18, s2",
        "mov v18.s[0], v0.s[0]",
        "stur s18, [x4, #-24]",
        "ldur s18, [x6, #-20]",
        "fmul s0, s18, s17",
        "mov v18.s[0], v0.s[0]",
        "ldur s2, [x4, #-20]",
        "fadd s0, s18, s2",
        "mov v18.s[0], v0.s[0]",
        "stur s18, [x4, #-20]",
        "ldur s18, [x6, #-16]",
        "fmul s0, s18, s16",
        "mov v18.s[0], v0.s[0]",
        "ldur s2, [x4, #-16]",
        "fadd s0, s18, s2",
        "mov v18.s[0], v0.s[0]",
        "stur s18, [x4, #-16]",
        "ldur s18, [x6, #-12]",
        "fmul s0, s18, s17",
        "mov v18.s[0], v0.s[0]",
        "ldur s2, [x4, #-12]",
        "fadd s0, s18, s2",
        "mov v18.s[0], v0.s[0]",
        "stur s18, [x4, #-12]",
        "ldur s18, [x6, #-8]",
        "fmul s0, s18, s16",
        "mov v18.s[0], v0.s[0]",
        "ldur s2, [x4, #-8]",
        "fadd s0, s18, s2",
        "mov v18.s[0], v0.s[0]",
        "stur s18, [x4, #-8]",
        "ldur s18, [x6, #-4]",
        "fmul s0, s18, s17",
        "mov v18.s[0], v0.s[0]",
        "ldur s2, [x4, #-4]",
        "fadd s0, s18, s2",
        "mov v18.s[0], v0.s[0]",
        "stur s18, [x4, #-4]",
        "subs w26, w10, #0x1 (1)",
        "mov x27, x10",
        "mov x10, x26"
      ]
    },
    "Scalar vector add loop": {
      "ExpectedInstructionCount": 6,
      "Comment": [
        "Saw this in bytemark"
      ],
      "x86Insts": [
        "movdqu  xmm0, [r12+rax]",
        "paddq   xmm0, xmm1",
        "movups  [r12+rax], xmm0",
        "add     rax, 0x10",
        "cmp     rsi, rax"
      ],
      "ExpectedArm64ASM": [
        "ldr q16, [x16, x4, sxtx]",
        "add v16.2d, v16.2d, v17.2d",
        "str q16, [x16, x4, sxtx]",
        "add x4, x4, #0x10 (16)",
        "eor w27, w10, w4",
        "subs x26, x10, x4"
      ]
    },
    "bytemark data xor loop": {
      "ExpectedInstructionCount": 12,
      "Comment": [
        "Saw this in bytemark"
      ],
      "x86Insts": [
        "mov     rdx, rax",
        "mov     rcx, rax",
        "mov     r14, rsi",
        "add     rax, 0x1",
        "shr     rdx, 0x6",
        "and     ecx, 0x3f",
        "shl     r14, cl",
        "xor     qword [rbx+rdx*8], r14",
        "cmp     rdi, rax"
      ],
      "ExpectedArm64ASM": [
        "mov x6, x4",
        "mov x5, x4",
        "mov x19, x10",
        "add x4, x4, #0x1 (1)",
        "lsr x6, x6, #6",
        "and w5, w5, #0x3f",
        "lsl x19, x19, x5",
        "ldr x20, [x7, x6, sxtx #3]",
        "eor x20, x20, x19",
        "str x20, [x7, x6, sxtx #3]",
        "eor w27, w11, w4",
        "subs x26, x11, x4"
      ]
    },
    "bytemark num sort": {
      "ExpectedInstructionCount": 6,
      "Comment": [
        "Saw this in bytemark"
      ],
      "x86Insts": [
        "mov    r13, qword [rsi+r9*8]",
        "mov    r11, r9",
        "or     r11, 0x1",
        "cmp    r13, qword [rsi+r11*8]"
      ],
      "ExpectedArm64ASM": [
        "ldr x17, [x10, x13, sxtx #3]",
        "mov x15, x13",
        "orr x15, x15, #0x1",
        "ldr x20, [x10, x15, sxtx #3]",
        "eor w27, w17, w20",
        "subs x26, x17, x20"
      ]
    },
    "bytemark fpemu": {
      "ExpectedInstructionCount": 10,
      "Comment": [
        "Saw this in bytemark"
      ],
      "x86Insts": [
        "movzx  r10d,word [rdx+0x4]",
        "movzx  edi,word [rdx+0x6]",
        "mov    dword [rsp+0xc],edi",
        "movzx  ebx,word [rdx+0x8]",
        "movzx  edi,word [rdx+0xa]",
        "mov    dword [rsp+0x10],edi",
        "lea    r8,[r11+r11*2]",
        "cmp    qword [r13+r8*4+0x4],0x0"
      ],
      "ExpectedArm64ASM": [
        "ldrh w14, [x6, #4]",
        "ldrh w11, [x6, #6]",
        "str w11, [x8, #12]",
        "ldrh w7, [x6, #8]",
        "ldrh w11, [x6, #10]",
        "str w11, [x8, #16]",
        "add x12, x15, x15, lsl #1",
        "add x20, x17, x12, lsl #2",
        "ldur x27, [x20, #4]",
        "subs x26, x27, #0x0 (0)"
      ]
    },
    "bytemark DivideInternalFPF": {
      "ExpectedInstructionCount": 15,
      "Comment": [
        "Saw this in bytemark"
      ],
      "x86Insts": [
        "push   rbp",
        "push   r15",
        "push   r14",
        "push   r13",
        "push   r12",
        "push   rbx",
        "sub    rsp,0x18",
        "mov    qword [rsp],rdx",
        "movzx  r10d,byte [rdi]",
        "lea    ecx,[r10+r10*4]",
        "movzx  eax,byte [rsi]",
        "add    eax,ecx",
        "cmp    eax,0x18"
      ],
      "ExpectedArm64ASM": [
        "str x9, [x8, #-8]!",
        "str x29, [x8, #-8]!",
        "str x19, [x8, #-8]!",
        "str x17, [x8, #-8]!",
        "str x16, [x8, #-8]!",
        "str x7, [x8, #-8]!",
        "sub x8, x8, #0x18 (24)",
        "str x6, [x8]",
        "ldrb w14, [x11]",
        "add x20, x14, x14, lsl #2",
        "mov w5, w20",
        "ldrb w4, [x10]",
        "add w4, w4, w5",
        "mvn w27, w4",
        "subs w26, w4, #0x18 (24)"
      ]
    },
    "bytemark huffman 1": {
      "ExpectedInstructionCount": 24,
      "x86Insts": [
        "mov    r9,rdx",
        "mov    r8,rcx",
        "nop    dword [rax+0x0]",
        "mov    r10d,esi",
        "shr    r10d,0x3",
        "movzx  r10d,byte [rbp+r10*1+0x0]",
        "mov    r11d,esi",
        "and    r11d,0x7",
        "bt     r10d,r11d",
        "lea    r8,[r8+r8*4]",
        "lea    r8,[rbx+r8*4+0x10]",
        "cmovae r8,r9",
        "movsxd r8,dword [r8]",
        "add    rsi,0x1",
        "lea    r10,[r8+r8*4]",
        "lea    r9,[rbx+r10*4]",
        "add    r9,0xc",
        "cmp    dword [rbx+r10*4+0xc],0xffffffff"
      ],
      "ExpectedArm64ASM": [
        "mov x13, x6",
        "mov x12, x5",
        "mov w14, w10",
        "lsr w14, w14, #3",
        "ldrb w14, [x9, x14, sxtx]",
        "mov w15, w10",
        "and w15, w15, #0x7",
        "lsr w20, w14, w15",
        "eor x20, x20, #0x1",
        "rmif x20, #63, #nzCv",
        "add x12, x12, x12, lsl #2",
        "add x20, x7, #0x10 (16)",
        "add x12, x20, x12, lsl #2",
        "csel x12, x13, x12, hs",
        "ldr w20, [x12]",
        "sxtw x12, w20",
        "add x10, x10, #0x1 (1)",
        "add x14, x12, x12, lsl #2",
        "add x13, x7, x14, lsl #2",
        "add x13, x13, #0xc (12)",
        "add x20, x7, x14, lsl #2",
        "ldr w20, [x20, #12]",
        "mvn w27, w20",
        "adds w26, w20, #0x1 (1)"
      ]
    },
    "bytemark huffman 2": {
      "ExpectedInstructionCount": 17,
      "x86Insts": [
        "movsxd r9,r8d",
        "lea    r9,[r9+r9*4]",
        "cmp    dword [rbx+r9*4+0xc],ecx",
        "sete   cl",
        "xor    cl,0x31",
        "mov    byte [rsp+rdi*1+0x50],cl",
        "add    rdi,0x1",
        "mov    ecx,r8d",
        "mov    r8d,dword [rbx+r9*4+0x8]",
        "cmp    r8d,0xfffffffe"
      ],
      "ExpectedArm64ASM": [
        "sxtw x13, w12",
        "add x13, x13, x13, lsl #2",
        "add x20, x7, x13, lsl #2",
        "ldr w20, [x20, #12]",
        "cmp w20, w5",
        "cset x20, eq",
        "bfxil x5, x20, #0, #8",
        "mov w20, #0x31",
        "eor x5, x5, x20",
        "add x20, x8, x11",
        "strb w5, [x20, #80]",
        "add x11, x11, #0x1 (1)",
        "mov w5, w12",
        "add x20, x7, x13, lsl #2",
        "ldr w12, [x20, #8]",
        "mvn w27, w12",
        "adds w26, w12, #0x2 (2)"
      ]
    },
    "bytemark huffman 3": {
      "ExpectedInstructionCount": 36,
      "x86Insts": [
        "mov    ecx,eax",
        "and    cl,0x7",
        "mov    r8b,0x1",
        "shl    r8b,cl",
        "mov    r9d,eax",
        "shr    r9d,0x3",
        "movzx  r10d,byte [rbp+r9*1+0x0]",
        "mov    r11b,0xfe",
        "mov    ecx,eax",
        "rol    r11b,cl",
        "and    r11b,r10b",
        "or     r8b,r10b",
        "cmp    byte [rsp+rdi*1+0x4f],0x31",
        "movzx  ecx,r8b",
        "movzx  r8d,r11b",
        "cmove  r8d,ecx",
        "add    rax,0x1",
        "mov    byte [rbp+r9*1+0x0],r8b",
        "add    rdi,0xffffffffffffffff"
      ],
      "ExpectedArm64ASM": [
        "mov w5, w4",
        "and x5, x5, #0xffffffffffffff07",
        "mov w20, #0x1",
        "bfxil x12, x20, #0, #8",
        "lsl w20, w12, w5",
        "bfxil x12, x20, #0, #8",
        "mov w13, w4",
        "lsr w13, w13, #3",
        "ldrb w14, [x9, x13, sxtx]",
        "mov w20, #0xfe",
        "bfxil x15, x20, #0, #8",
        "mov w5, w4",
        "and x20, x5, #0x7",
        "mov w21, w15",
        "bfi w21, w15, #24, #8",
        "neg w20, w20",
        "ror w20, w21, w20",
        "bfxil x15, x20, #0, #8",
        "and w20, w15, w14",
        "bfxil x15, x20, #0, #8",
        "orr w20, w12, w14",
        "bfxil x12, x20, #0, #8",
        "mov w20, #0x31",
        "add x21, x8, x11",
        "ldrb w21, [x21, #79]",
        "lsl w0, w21, #24",
        "cmp w0, w20, lsl #24",
        "uxtb w5, w12",
        "uxtb w12, w15",
        "csel w12, w5, w12, eq",
        "add x4, x4, #0x1 (1)",
        "strb w12, [x9, x13, sxtx]",
        "mvn w27, w11",
        "subs x26, x11, #0x1 (1)",
        "cfinv",
        "mov x11, x26"
      ]
    },
    "pcmpistri xmm0, xmm1, 0_0_00_11_01b": {
      "ExpectedInstructionCount": 41,
      "Comment": [
        "A Hat In Time spends at least 5% CPU time in this instruction",
        "Comes from vcruntime140.dll wcsstr"
      ],
      "ExpectedArm64ASM": [
        "mrs x0, nzcv",
        "str w0, [x28, #1000]",
        "stp x4, x5, [x28, #280]",
        "stp x6, x7, [x28, #296]",
        "str x8, [x28, #312]",
        "stp x16, x17, [x28, #376]",
        "sub sp, sp, #0x70 (112)",
        "mov x0, sp",
        "st1 {v2.2d, v3.2d}, [x0], #32",
        "st1 {v4.2d, v5.2d, v6.2d, v7.2d}, [x0], #64",
        "str x30, [x0], #16",
        "mov x0, v16.d[0]",
        "mov x1, v16.d[1]",
        "mov x2, v17.d[0]",
        "mov x3, v17.d[1]",
        "mov w4, #0xd",
        "ldr x5, [x28, #1760]",
        "blr x5",
        "ldr w4, [x28, #1000]",
        "msr nzcv, x4",
        "ldp x4, x5, [x28, #280]",
        "ldp x6, x7, [x28, #296]",
        "ldr x8, [x28, #312]",
        "ldp x16, x17, [x28, #376]",
        "ld1 {v2.2d, v3.2d}, [sp], #32",
        "ld1 {v4.2d, v5.2d, v6.2d, v7.2d}, [sp], #64",
        "ldr x30, [sp], #16",
        "mov w20, w0",
        "mov w27, #0x0",
        "uxth w21, w20",
        "mov w22, #0x8",
        "lsr w0, w21, #0",
        "cmp w0, #0x0 (0)",
        "rbit w0, w0",
        "clz w23, w0",
        "csinv w23, w23, wzr, ne",
        "cmp x21, #0x0 (0)",
        "csel x5, x22, x23, eq",
        "mov w26, #0x1",
        "eor w20, w20, #0x20000000",
        "msr nzcv, x20"
      ]
    }
  }
}
