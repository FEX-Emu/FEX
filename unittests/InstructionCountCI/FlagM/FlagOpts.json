{
  "Features": {
    "EnabledHostFeatures": [
      "FLAGM",
      "FLAGM2"
    ],
    "DisabledHostFeatures": [
      "SVE128",
      "SVE256"
    ]
  },
  "Instructions": {
    "Chained add": {
      "ExpectedInstructionCount": 10,
      "x86Insts": [
        "add rax, rbx",
        "adc rcx, rcx"
      ],
      "ExpectedArm64ASM": [
        "mov x20, x7",
        "mov x21, x4",
        "adds x22, x21, x20",
        "mov x4, x22",
        "mov x20, x5",
        "mov w21, #0x0",
        "mov x27, x21",
        "adcs x21, x20, x20",
        "mov x26, x21",
        "mov x5, x21"
      ]
    },
    "Chained sub": {
      "ExpectedInstructionCount": 14,
      "x86Insts": [
        "sub rax, rbx",
        "sbb rcx, rdx"
      ],
      "ExpectedArm64ASM": [
        "mov x20, x7",
        "mov x21, x4",
        "subs x22, x21, x20",
        "cfinv",
        "mov x4, x22",
        "mov x20, x6",
        "mov x21, x5",
        "eor w22, w21, w20",
        "mov x27, x22",
        "cfinv",
        "sbcs x22, x21, x20",
        "cfinv",
        "mov x26, x22",
        "mov x5, x22"
      ]
    },
    "Inverted add": {
      "ExpectedInstructionCount": 12,
      "x86Insts": [
        "add rax, rbx",
        "adc rcx, rdx",
        "cmc"
      ],
      "ExpectedArm64ASM": [
        "mov x20, x7",
        "mov x21, x4",
        "adds x22, x21, x20",
        "mov x4, x22",
        "mov x20, x6",
        "mov x21, x5",
        "eor w22, w21, w20",
        "mov x27, x22",
        "adcs x22, x21, x20",
        "mov x26, x22",
        "mov x5, x22",
        "cfinv"
      ]
    },
    "Inverted sub": {
      "ExpectedInstructionCount": 14,
      "x86Insts": [
        "sub rax, rbx",
        "sbb rcx, rcx",
        "cmc"
      ],
      "ExpectedArm64ASM": [
        "mov x20, x7",
        "mov x21, x4",
        "subs x22, x21, x20",
        "cfinv",
        "mov x4, x22",
        "mov x20, x5",
        "mov w21, #0x0",
        "mov x27, x21",
        "cfinv",
        "sbcs x21, x20, x20",
        "cfinv",
        "mov x26, x21",
        "mov x5, x21",
        "cfinv"
      ]
    },
    "ADC dead": {
      "ExpectedInstructionCount": 9,
      "x86Insts": [
        "add rax, rbx",
        "adc rcx, rcx",
        "test rcx, rcx"
      ],
      "ExpectedArm64ASM": [
        "mov x20, x7",
        "mov x21, x4",
        "adds x22, x21, x20",
        "mov x4, x22",
        "mov x20, x5",
        "adc x21, x20, x20",
        "mov x5, x21",
        "ands x20, x21, x21",
        "mov x26, x20"
      ]
    },
    "INC consumed": {
      "ExpectedInstructionCount": 10,
      "x86Insts": [
        "add rax, rbx",
        "inc rax"
      ],
      "ExpectedArm64ASM": [
        "mov x20, x7",
        "mov x21, x4",
        "adds x22, x21, x20",
        "mov x4, x22",
        "cset w20, hs",
        "mov x27, x22",
        "adds x21, x22, #0x1 (1)",
        "mov x26, x21",
        "rmif x20, #63, #nzCv",
        "mov x4, x21"
      ]
    },
    "INC dead": {
      "ExpectedInstructionCount": 9,
      "x86Insts": [
        "add rax, rbx",
        "inc rax",
        "test rax, rdx"
      ],
      "ExpectedArm64ASM": [
        "mov x20, x7",
        "mov x21, x4",
        "add x22, x21, x20",
        "mov x4, x22",
        "add x20, x22, #0x1 (1)",
        "mov x4, x20",
        "mov x21, x6",
        "ands x22, x20, x21",
        "mov x26, x22"
      ]
    },
    "DEC consumed": {
      "ExpectedInstructionCount": 11,
      "x86Insts": [
        "sub rax, rbx",
        "dec rax"
      ],
      "ExpectedArm64ASM": [
        "mov x20, x7",
        "mov x21, x4",
        "subs x22, x21, x20",
        "cfinv",
        "mov x4, x22",
        "cset w20, hs",
        "mov x27, x22",
        "subs x21, x22, #0x1 (1)",
        "mov x26, x21",
        "rmif x20, #63, #nzCv",
        "mov x4, x21"
      ]
    },
    "DEC dead": {
      "ExpectedInstructionCount": 9,
      "x86Insts": [
        "sub rax, rbx",
        "dec rax",
        "test rax, rcx"
      ],
      "ExpectedArm64ASM": [
        "mov x20, x7",
        "mov x21, x4",
        "sub x22, x21, x20",
        "mov x4, x22",
        "sub x20, x22, #0x1 (1)",
        "mov x4, x20",
        "mov x21, x5",
        "ands x22, x20, x21",
        "mov x26, x22"
      ]
    },
    "8-bit DEC consumed": {
      "ExpectedInstructionCount": 19,
      "x86Insts": [
        "sub al, ah",
        "dec al"
      ],
      "ExpectedArm64ASM": [
        "mov x20, x4",
        "lsr w21, w20, #8",
        "lsl w0, w20, #24",
        "cmp w0, w21, lsl #24",
        "sub w22, w20, w21",
        "cfinv",
        "mov x21, x20",
        "bfxil x21, x22, #0, #8",
        "mov x4, x21",
        "uxtb w20, w21",
        "sub w22, w20, #0x1 (1)",
        "mov x26, x22",
        "mov x27, x20",
        "setf8 w22",
        "bic w23, w20, w22",
        "rmif x23, #7, #nzcV",
        "mov x20, x21",
        "bfxil x20, x22, #0, #8",
        "mov x4, x20"
      ]
    },
    "8-bit DEC dead": {
      "ExpectedInstructionCount": 14,
      "x86Insts": [
        "sub al, ah",
        "dec al",
        "test al, al"
      ],
      "ExpectedArm64ASM": [
        "mov x20, x4",
        "lsr w21, w20, #8",
        "sub w22, w20, w21",
        "mov x21, x20",
        "bfxil x21, x22, #0, #8",
        "mov x4, x21",
        "uxtb w20, w21",
        "sub w22, w20, #0x1 (1)",
        "mov x20, x21",
        "bfxil x20, x22, #0, #8",
        "mov x4, x20",
        "mov x21, x20",
        "cmn wzr, w21, lsl #24",
        "mov x26, x21"
      ]
    },
    "Variable shift dead": {
      "ExpectedInstructionCount": 7,
      "x86Insts": [
        "sar rax, cl",
        "test rax, rdx"
      ],
      "ExpectedArm64ASM": [
        "mov x20, x4",
        "mov x21, x5",
        "asr x22, x20, x21",
        "mov x4, x22",
        "mov x20, x6",
        "ands x21, x22, x20",
        "mov x26, x21"
      ]
    },
    "Variable rotate-through-carry dead": {
      "ExpectedInstructionCount": 22,
      "x86Insts": [
        "rcr rax, cl",
        "test rax, rdx"
      ],
      "ExpectedArm64ASM": [
        "mov x20, x5",
        "and x21, x20, #0x3f",
        "cbz x21, #+0x40",
        "mov x20, x5",
        "mov x21, x4",
        "lsr x22, x21, x20",
        "cset w23, hs",
        "neg x24, x20",
        "lsl x25, x21, x24",
        "orr x30, x22, x25, lsl #1",
        "sub x22, x20, #0x1 (1)",
        "lsr x20, x21, x22",
        "rmif x20, #63, #nzCv",
        "lsl x20, x23, x24",
        "orr x21, x30, x20",
        "eor x20, x21, x21, lsr #1",
        "rmif x20, #62, #nzcV",
        "mov x4, x21",
        "mov x20, x6",
        "mov x21, x4",
        "ands x22, x21, x20",
        "mov x26, x22"
      ]
    },
    "Partial NZCV select (cmp)": {
      "ExpectedInstructionCount": 11,
      "x86Insts": [
        "cmp rax, rbx",
        "setz cl",
        "test cl, cl"
      ],
      "ExpectedArm64ASM": [
        "mov x20, x7",
        "mov x21, x4",
        "subs x22, x21, x20",
        "cset x20, eq",
        "mov x21, x5",
        "mov x23, x21",
        "bfxil x23, x20, #0, #8",
        "mov x5, x23",
        "mov x20, x23",
        "cmn wzr, w20, lsl #24",
        "mov x26, x20"
      ]
    },
    "Partial NZCV select (add)": {
      "ExpectedInstructionCount": 12,
      "x86Insts": [
        "add rax, rbx",
        "setz cl",
        "test cl, cl"
      ],
      "ExpectedArm64ASM": [
        "mov x20, x7",
        "mov x21, x4",
        "adds x22, x21, x20",
        "mov x4, x22",
        "cset x20, eq",
        "mov x21, x5",
        "mov x22, x21",
        "bfxil x22, x20, #0, #8",
        "mov x5, x22",
        "mov x20, x22",
        "cmn wzr, w20, lsl #24",
        "mov x26, x20"
      ]
    },
    "AND use only ZF": {
      "ExpectedInstructionCount": 12,
      "x86Insts": [
        "and eax, ebx",
        "setz cl",
        "test cl, cl"
      ],
      "ExpectedArm64ASM": [
        "mov x20, x7",
        "mov x21, x4",
        "ands w22, w21, w20",
        "mov x4, x22",
        "cset x20, eq",
        "mov x21, x5",
        "mov x22, x21",
        "bfxil x22, x20, #0, #8",
        "mov x5, x22",
        "mov x20, x22",
        "cmn wzr, w20, lsl #24",
        "mov x26, x20"
      ]
    },
    "AND use only PF": {
      "ExpectedInstructionCount": 15,
      "x86Insts": [
        "and eax, ebx",
        "setp cl",
        "test cl, cl"
      ],
      "ExpectedArm64ASM": [
        "mov x20, x7",
        "mov x21, x4",
        "and w22, w21, w20",
        "mov x4, x22",
        "eor w20, w22, w22, lsr #4",
        "eor w21, w20, w20, lsr #2",
        "eon w20, w21, w21, lsr #1",
        "and x21, x20, #0x1",
        "mov x20, x5",
        "mov x22, x20",
        "bfxil x22, x21, #0, #8",
        "mov x5, x22",
        "mov x20, x22",
        "cmn wzr, w20, lsl #24",
        "mov x26, x20"
      ]
    },
    "Dead cmpxchg flags": {
      "ExpectedInstructionCount": 40,
      "x86Insts": [
        "cmpxchg8b [rbp]",
        "test rax, rax"
      ],
      "ExpectedArm64ASM": [
        "sub sp, sp, #0x40 (64)",
        "mov x20, x9",
        "add x21, x20, #0x0 (0)",
        "mov x20, x4",
        "mov w22, w20",
        "mov x23, x6",
        "mov w24, w23",
        "mov x30, x24",
        "mov w24, w22",
        "mov w25, w30",
        "mov x22, x7",
        "mov w30, w22",
        "mov x22, x5",
        "str x23, [sp]",
        "mov w23, w22",
        "str x20, [sp, #32]",
        "mov x22, x21",
        "mov w20, w30",
        "mov w21, w23",
        "mov x30, x22",
        "mov w2, w24",
        "mov w3, w25",
        "caspal w2, w3, w20, w21, [x30]",
        "mov w22, w2",
        "mov w23, w3",
        "mov w20, w22",
        "mov w21, w23",
        "mrs x0, nzcv",
        "cmp w22, w24",
        "ccmp w23, w25, #nzcv, eq",
        "rmif x0, #0, #NzCV",
        "ldr x22, [sp, #32]",
        "csel x23, x20, x22, ne",
        "mov x4, x23",
        "ldr x20, [sp]",
        "csel x22, x21, x20, ne",
        "mov x6, x22",
        "ands x20, x23, x23",
        "mov x26, x20",
        "add sp, sp, #0x40 (64)"
      ]
    }
  }
}
